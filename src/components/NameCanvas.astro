---
// No server-side code needed for this component
---

<div class="name-canvas-container">
    <!-- SEO and accessibility text -->
    <h1 class="sr-only">Yuval Adam</h1>
    <span class="seo-text">Yuval Adam - Software Engineer, Developer, Tech Enthusiast</span>
    
    <!-- Canvas element -->
    <canvas 
        id="nameCanvas" 
        class="cursor-pointer mx-auto block" 
        role="img" 
        aria-label="Yuval Adam - Animated Logo"
        title="Yuval Adam"
    ></canvas>
    
    <!-- Fallback for browsers without JavaScript -->
    <noscript>
        <div class="fallback-text">
            <h1 class="text-4xl font-bold font-serif text-center text-gray-800">Yuval Adam</h1>
        </div>
    </noscript>
</div>

<script>
class NameCanvas {
    constructor() {
        this.canvas = document.getElementById('nameCanvas');
        this.ctx = this.canvas.getContext('2d');
        this.pixels = [];
        this.animationId = null;
        
        // Responsive canvas dimensions
        this.setResponsiveDimensions();
        this.dpr = window.devicePixelRatio || 1;
        
        // Animation properties
        this.time = 0;
        this.hovering = false;
        
        this.init();
        this.setupResponsive();
    }
    
    setResponsiveDimensions() {
        const viewportWidth = window.innerWidth;
        
        if (viewportWidth < 480) {
            // Mobile
            this.width = Math.min(350, viewportWidth - 40);
            this.height = 70;
            this.fontSize = 42;
        } else if (viewportWidth < 768) {
            // Tablet
            this.width = 420;
            this.height = 85;
            this.fontSize = 56;
        } else {
            // Desktop
            this.width = 500;
            this.height = 100;
            this.fontSize = 64;
        }
    }
    
    setupResponsive() {
        let resizeTimeout;
        window.addEventListener('resize', () => {
            clearTimeout(resizeTimeout);
            resizeTimeout = setTimeout(() => {
                this.setResponsiveDimensions();
                this.init();
            }, 250);
        });
    }
    
    init() {
        // Set canvas size with high DPI support
        this.canvas.width = this.width * this.dpr;
        this.canvas.height = this.height * this.dpr;
        this.canvas.style.width = this.width + 'px';
        this.canvas.style.height = this.height + 'px';
        
        // Scale context for crisp rendering
        this.ctx.scale(this.dpr, this.dpr);
        
        // Enable text smoothing
        this.ctx.textRenderingOptimization = 'optimizeQuality';
        this.ctx.imageSmoothingEnabled = true;
        this.ctx.imageSmoothingQuality = 'high';
        
        // Generate pixels from text
        this.generatePixels();
        
        // Start animation
        this.animate();
        
        // Add hover events
        this.canvas.addEventListener('mouseenter', () => {
            this.hovering = true;
        });
        
        this.canvas.addEventListener('mouseleave', () => {
            this.hovering = false;
        });
    }
    
    generatePixels() {
        // Create temporary canvas for text rendering
        const tempCanvas = document.createElement('canvas');
        const tempCtx = tempCanvas.getContext('2d');
        
        // High resolution for crisp text
        const scale = 2;
        tempCanvas.width = this.width * scale;
        tempCanvas.height = this.height * scale;
        tempCtx.scale(scale, scale);
        
        // High-quality text rendering
        tempCtx.textRenderingOptimization = 'optimizeQuality';
        tempCtx.imageSmoothingEnabled = true;
        tempCtx.imageSmoothingQuality = 'high';
        
        // Set font and draw text (responsive)
        tempCtx.font = `bold ${this.fontSize}px Lora, serif`;
        tempCtx.fillStyle = '#000';
        tempCtx.textAlign = 'center';
        tempCtx.textBaseline = 'middle';
        tempCtx.fillText('Yuval Adam', this.width / 2, this.height / 2);
        
        // Get image data
        const imageData = tempCtx.getImageData(0, 0, tempCanvas.width, tempCanvas.height);
        const data = imageData.data;
        
        // Extract pixels with better sampling
        this.pixels = [];
        const pixelSize = 3; // Reduced for better detail
        
        for (let y = 0; y < this.height * scale; y += pixelSize * scale) {
            for (let x = 0; x < this.width * scale; x += pixelSize * scale) {
                const index = (y * tempCanvas.width + x) * 4;
                const alpha = data[index + 3];
                
                if (alpha > 128) { // If pixel is not transparent
                    this.pixels.push({
                        x: x / scale,
                        y: y / scale,
                        originalX: x / scale,
                        originalY: y / scale,
                        size: Math.random() * 1.5 + 2, // Larger, more consistent sizes
                        speed: Math.random() * 0.02 + 0.01,
                        offset: Math.random() * Math.PI * 2,
                        color: `hsl(${200 + Math.random() * 40}, 80%, ${40 + Math.random() * 20}%)` // Better contrast
                    });
                }
            }
        }
    }
    
    animate() {
        this.time += 0.02;
        
        // Clear canvas with better clearing
        this.ctx.clearRect(0, 0, this.width, this.height);
        
        // Draw pixels
        this.pixels.forEach((pixel, index) => {
            // Animation effects
            const wave = Math.sin(this.time + pixel.offset) * 1.5;
            const pulse = Math.sin(this.time * 2 + index * 0.1) * 0.3 + 1;
            
            if (this.hovering) {
                // Scatter effect on hover
                pixel.x += (Math.random() - 0.5) * 2;
                pixel.y += (Math.random() - 0.5) * 2;
                
                // Gradually return to original position
                pixel.x += (pixel.originalX - pixel.x) * 0.1;
                pixel.y += (pixel.originalY - pixel.y) * 0.1;
            } else {
                // Gentle wave animation
                pixel.x = pixel.originalX + wave;
                pixel.y = pixel.originalY + Math.sin(this.time + pixel.offset * 2) * 0.8;
            }
            
            // Draw circle with better anti-aliasing
            this.ctx.save();
            this.ctx.globalAlpha = 0.9;
            this.ctx.beginPath();
            this.ctx.arc(
                pixel.x, 
                pixel.y, 
                pixel.size * pulse, 
                0, 
                Math.PI * 2
            );
            this.ctx.fillStyle = pixel.color;
            this.ctx.fill();
            
            // Add subtle glow effect
            if (this.hovering) {
                this.ctx.globalAlpha = 0.3;
                this.ctx.shadowColor = pixel.color;
                this.ctx.shadowBlur = 8;
                this.ctx.fill();
                this.ctx.shadowBlur = 0;
            }
            
            this.ctx.restore();
        });
        
        this.animationId = requestAnimationFrame(() => this.animate());
    }
    
    destroy() {
        if (this.animationId) {
            cancelAnimationFrame(this.animationId);
        }
    }
}

// Initialize when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    new NameCanvas();
});
</script>

<style>
    .name-canvas-container {
        position: relative;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        min-height: 100px;
    }
    
    #nameCanvas {
        display: block;
        background: transparent;
        max-width: 100%;
        height: auto;
    }
    
    .sr-only {
        position: absolute;
        width: 1px;
        height: 1px;
        padding: 0;
        margin: -1px;
        overflow: hidden;
        clip: rect(0, 0, 0, 0);
        white-space: nowrap;
        border: 0;
    }
    
    .seo-text {
        position: absolute;
        left: -9999px;
        width: 1px;
        height: 1px;
        overflow: hidden;
    }
    
    .fallback-text {
        display: flex;
        align-items: center;
        justify-content: center;
        min-height: 100px;
        padding: 1rem;
    }
    
    /* Responsive adjustments */
    @media (max-width: 480px) {
        .name-canvas-container {
            min-height: 70px;
        }
        .fallback-text h1 {
            font-size: 2.5rem;
        }
    }
    
    @media (max-width: 768px) {
        .name-canvas-container {
            min-height: 85px;
        }
        .fallback-text h1 {
            font-size: 3rem;
        }
    }
</style>